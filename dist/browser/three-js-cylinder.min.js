!(function(t, i) {
"object" == typeof exports && "undefined" != typeof module
? i(exports)
: "function" == typeof define && define.amd
? define(["exports"], i)
: i((t.THREECone = {}));
})(this, function(t) {
"use strict";
const i = require("three-full/builds/Three.cjs.js");
i.Box3, i.Vector3;
function s(t, s, e, n, r) {
(this.v = t || new i.Vector3()),
(this.axis = s || new i.Vector3(1, 0, 0)),
(this.radius = e),
(this.inf = n || 0),
(this.sup = r || 1 / 0);
}
var e, n, r, o;
Object.assign(s.prototype, {
set: function(t, i, s, e, n) {
return (
this.v.copy(t),
this.axis.copy(i),
(this.radius = s),
(this.inf = e || 0),
(this.sup = n || 1 / 0),
this
);
},
clone: function() {
return new this.constructor().copy(this);
},
copy: function(t) {
return (
this.v.copy(t.v),
this.axis.copy(t.axis),
(this.radius = t.radius),
(this.inf = t.inf),
(this.sup = t.sup),
this
);
},
empty: function() {
return this.radius <= 0 || this.inf >= this.sup;
},
getBoundingBox: function(t) {
throw "not implemented yet, todo";
},
equals: function(t) {
return (
t.v.equals(this.v) &&
t.axis.equals(this.axis) &&
t.radius === this.radius &&
t.inf === this.inf &&
t.sup === this.sup
);
}
}),
(i.Cylinder = s),
(i.Ray.prototype.intersectCylinder = ((e = new i.Vector3()),
(n = new i.Vector3()),
(r = new i.Vector3()),
(o = new i.Vector3()),
function(t, i) {
e.subVectors(this.origin, t.v);
var s = e.dot(t.axis),
u = this.direction.dot(t.axis);
r.set(
this.direction.x - u * t.axis.x,
this.direction.y - u * t.axis.y,
this.direction.z - u * t.axis.z
),
o.set(e.x - s * t.axis.x, e.y - s * t.axis.y, e.z - s * t.axis.z);
var a = r.lengthSq(),
c = 2 * r.dot(o),
h = c * c - 4 * a * (o.lengthSq() - t.radius * t.radius);
if (h < 0) return 0;
if (0 === h) {
var d = (-c - Math.sqrt(h)) / (2 * a);
return (
this.at(d, i),
n.subVectors(i, t.v),
(f = n.dot(t.axis)) > t.inf && f < t.sup ? i : null
);
}
var f,
p = Math.sqrt(h);
(d = (-c - p) / (2 * a)),
this.at(d, i),
n.subVectors(i, t.v),
((f = n.dot(t.axis)) < t.inf || f > t.sup) && (d = Number.MAX_VALUE);
var x = (-c + p) / (2 * a);
return (
this.at(x, o),
n.subVectors(o, t.v),
(f = n.dot(t.axis)) > t.inf && f < t.sup && x < d && ((d = x), i.copy(o)),
d !== Number.MAX_VALUE ? i : null
);
})),
(t.Cylinder = s),
Object.defineProperty(t, "__esModule", {value: !0});
});
